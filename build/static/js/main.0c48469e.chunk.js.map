{"version":3,"sources":["components/assets/loader.gif","components/listitem.js","components/listcontainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ListItem","state","hover","this","setState","tooltipStyle","display","react_default","a","createElement","className","onMouseOver","handleMouseIn","bind","onMouseOut","handleMouseOut","props","item","name","style","address","street","suite","city","zipcode","align","username","React","Component","ListContainer","loading","list","error","hasError","errorInfo","_this2","fetchList","then","catch","err","console","log","prevState","Object","objectSpread","String","src","loader","alt","map","e","i","components_listitem","key","Promise","resolve","reject","fetch","response","json","data","App","components_listcontainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c48469e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.a6a6686c.gif\";","import React from \"react\";\nimport \"../styles/listitem.css\";\n\nclass ListItem extends React.Component {\n  state = {\n    hover: false\n  };\n\n  handleMouseIn() {\n    this.setState({ hover: true });\n  }\n\n  handleMouseOut() {\n    this.setState({ hover: false });\n  }\n\n  render() {\n    const tooltipStyle = {\n      display: this.state.hover ? \"block\" : \"none\"\n    };\n\n    return (\n      <tr>\n        <td\n          className=\"tooltip\"\n          onMouseOver={this.handleMouseIn.bind(this)}\n          onMouseOut={this.handleMouseOut.bind(this)}\n        >\n          {this.props.item.name}\n          <div className=\"tooltiptext\" style={tooltipStyle}>\n            <strong>Street</strong> {this.props.item.address.street}\n            <br />\n            <strong>Suit</strong> {this.props.item.address.suite}\n            <br />\n            <strong>City</strong> {this.props.item.address.city}\n            <br />\n            <strong>Zip</strong> {this.props.item.address.zipcode}\n          </div>\n        </td>\n        <td className=\"username\" align=\"right\">\n          ({this.props.item.username})\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default ListItem;\n","import React from \"react\";\nimport \"../styles/listcontainer.css\";\nimport ListItem from \"./listitem\";\nimport loader from \"./assets/loader.gif\";\n\nclass ListContainer extends React.Component {\n  state = {\n    loading: true,\n    list: [],\n    error: {\n      hasError: false,\n      errorInfo: {}\n    }\n  };\n\n  componentDidMount() {\n    fetchList\n      .then(list => {\n        this.setState({ list });\n      })\n      .then(() => this.setState({ loading: false }))\n      .catch(err => {\n        console.log(err);\n        this.setState(prevState => ({\n          error: {\n            ...prevState.error,\n            errorInfo: err,\n            hasError: true\n          }\n        }));\n      });\n  }\n\n  render() {\n    const { loading } = this.state;\n    if (this.state.error.hasError)\n      return (\n        <div>\n          <h1>error in fetching json</h1>\n          <strong>Error message:</strong>\n          <p>{String(this.state.error.errorInfo)}</p>\n        </div>\n      );\n    return (\n      <div className=\"tableContainer\">\n        <h1 className=\"heading\">\n          Users\n          {loading > 0 && \" (loading)\"}\n          {loading > 0 && (\n            <img className=\"loaderGif\" src={loader} alt=\"loading...\" />\n          )}\n        </h1>\n\n        <div className=\"table\">\n          <table>\n            {!loading > 0 && (\n              <tbody>\n                {this.state.list.map((e, i) => {\n                  return <ListItem key={i} item={e} />;\n                })}\n              </tbody>\n            )}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nvar fetchList = new Promise(function(resolve, reject) {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => {\n      return response.json();\n    })\n    .then(data => {\n      resolve(data);\n    })\n    .catch(err => {\n      reject(err);\n    });\n});\n\nexport default ListContainer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListContainer from \"./components/listcontainer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}